			CMD
* Создание файда в cmd 
$ echo > file.php


		GIT
*** Имя пользователя
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

*** Проверка настроек | Помощь
$ git config --list
$ git help 
$ git <команда> --help 

#Игнорирование файлов 
Необходимо создать .gitignore:
$ cat .gitignore 

Вот ещё один пример файла .gitignore:
	# Исключить все файлы с расширением .a
	*.a

	# Но отслеживать файл lib.a даже если он подпадает под исключение выше
	!lib.a

	# Исключить файл TODO в корневом каталоге, но не файл в subdir/TODO
	/TODO

	# Игнорировать все файлы в каталоге build/
	build/

	# Игнорировать файл doc/notes.txt, но не файл doc/server/arch.txt
	doc/*.txt

	# Игнорировать все .txt файлы в каталоге doc/
	doc/**/*.txt


# Инициализация репозитория 
$ git init 

# Определение состояния файлов | Проверка статуса
$ git status
*** Неотслеживаемый файл «Untracked files»
*** Статус Untracked означает, что Git видит файл
## Сокращённый вывод статуса 
Новые неотслеживаемые файлы помечены ?? слева от них, файлы добавленные в отслеживаемые помечены A, отредактированные файлы помечены M и так далее.
$ git status -s    
$ git status --short
# Что изменили, но не проиндексировали:
Эта команда сравнивает содержимое вашего рабочего каталога с содержимым индекса. Результат показывает ещё не проиндексированные изменения.
$git diff 
		Посмотреть, что вы проиндексировали и что войдёт в следующий коммит
		$git diff --staged

# Добавление изменений
$ git add .  | Всех изменений из папки
$ git add file.php  | По конкретному файлу

# Добавление коммита 
$ git commit -m "Текст коммита" 
*** Для ещё более подробного напоминания, что же именно вы поменяли, можете передать аргумент -v в команду git commit. Это приведёт к тому, что в комментарий будет также помещена дельта/diff изменений, таким образом вы сможете точно увидеть все изменения которые вы совершили.
	# Игнорирование индексации 
	Добавление параметра -a в команду git commit заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без git add
	$ git commit -a -m 'Add new benchmarks

# Добавление изменений в GitHub 
$ git push -u origin main

# Клонирование репозитория (скачка)
		При выполнении git clone с сервера забирается (pulled) каждая версия каждого файла из истории проекта
git clone https://github.com/IvanTrusov11/git-test-hub.git

Для того, чтобы клонировать репозиторий в каталог с именем, отличающимся от libgit2, необходимо указать желаемое имя, как параметр командной строки:
$ git clone https://github.com/libgit2/libgit2 mylibgit
вы также можете встретить git:// или user@server:path/to/repo.git, использующий протокол передачи SSH

# Удаление файлов 
$git rm FILE.php